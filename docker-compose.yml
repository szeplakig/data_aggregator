version: '3.8'

services:
  # PostgreSQL database
  db:
    image: postgres:16-alpine
    container_name: data_aggregator_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: data_aggregator
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: data_aggregator_backend
    restart: unless-stopped
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/data_aggregator
      API_PREFIX: /api
      CORS_ORIGINS: '["http://localhost:5173","http://localhost","http://localhost:80"]'
      DEFAULT_FETCH_INTERVAL_MINUTES: 60
      PYTHONPATH: /workspace
    ports:
      - "8000:8000"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./backend:/workspace/backend
    command: uvicorn backend.app.main:app --host 0.0.0.0 --port 8000 --reload
    networks:
      - app-network

  # Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: data_aggregator_frontend
    restart: unless-stopped
    ports:
      - "80:80"
    depends_on:
      - backend
    environment:
      - NODE_ENV=production
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
